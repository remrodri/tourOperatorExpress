import { ITourTypeRepository } from "src/modules/tourType/repository/ITourTypeRepository";
import { TourPackageDto } from "../dto/TourPackageDto";
import { ITourPackageRepository } from "../repository/ITourPackageRepository";
import { TourPackageVo } from "../vo/TourPackageVo";
import { ITourPackageService } from "./ITourPackageService";
import { HttpException } from "../../../middleware/httpException";
import { StatusCodes } from "http-status-codes";
import { ITourPackage } from "../model/ITourPackage";
import { IDateRangeService } from "../../dateRange/service/IDateRangeService";
import { DateRangeDto } from "../../dateRange/dto/DateRangeDto";
import mongoose from "mongoose";

export class TourPackageService implements ITourPackageService {
  private readonly tourPackageRepository: ITourPackageRepository;
  private readonly dateRangeService: IDateRangeService;

  constructor(tourPackageRepository: ITourPackageRepository, dateRangeService: IDateRangeService) {
    this.tourPackageRepository = tourPackageRepository;
    this.dateRangeService = dateRangeService;
  }

  async update(id: string, dto: TourPackageDto): Promise<TourPackageVo> {
    try {
      const tpFound = await this.tourPackageRepository.findByIdDB(id);
      if (!tpFound) {
        throw new HttpException(StatusCodes.NOT_FOUND, "Not found");
      }
      
      // Create date ranges using the service
      const dateRangeIds = await Promise.all(
        dto.dateRanges.map(async (range) => {
          const dateRangeDto: DateRangeDto = {
            dates: range.dates,
            state: "activo"
          };
          
          const dateRangeVo = await this.dateRangeService.create(dateRangeDto);
          return new mongoose.Types.ObjectId(dateRangeVo.id);
        })
      );
      
      // Update DTO with ObjectId references
      const updatedDto = {
        ...dto,
        dateRanges: dateRangeIds
      };
      
      const tpUpdated = await this.tourPackageRepository.updateDB(id, updatedDto);
      if (!tpUpdated) {
        throw new HttpException(
          StatusCodes.INTERNAL_SERVER_ERROR,
          "Error updating"
        );
      }
      
      const response = new TourPackageVo(
        tpUpdated._id.toString(),
        tpUpdated.name,
        tpUpdated.tourType.toString(),
        tpUpdated.cancellationPolicy.toString(),
        tpUpdated.touristDestination.toString(),
        tpUpdated.duration,
        tpUpdated.dateRanges,
        tpUpdated.price,
        {
          days: tpUpdated.itinerary.days.map((day) => ({
            dayNumber: day.dayNumber,
            activities: day.activities.map((activity) => ({
              description: activity.description,
              time: activity.time,
            })),
          })),
        },
        tpUpdated.status
      );
      return response;
    } catch (error) {
      throw new HttpException(
        StatusCodes.INTERNAL_SERVER_ERROR,
        "Internal server error"
      );
    }
  }

  async getAllTourPackages(): Promise<TourPackageVo[]> {
    try {
      const tourPackages = await this.tourPackageRepository.geatAllDB();
      if (!tourPackages) {
        throw new HttpException(StatusCodes.NOT_FOUND, "Tour packages not found");
      }
      const vos = tourPackages.map(
        (tourPackage) =>
          new TourPackageVo(
            tourPackage._id.toString(),
            tourPackage.name,
            tourPackage.tourType.toString(),
            tourPackage.cancellationPolicy.toString(),
            tourPackage.touristDestination.toString(),
            tourPackage.duration,
            tourPackage.dateRanges,
            tourPackage.price,
            {
              days: tourPackage.itinerary.days.map((day) => ({
                dayNumber: day.dayNumber,
                activities: day.activities.map((activity) => ({
                  description: activity.description,
                  time: activity.time,
                })),
              })),
            },
            tourPackage.status
          )
      );
      return vos;
    } catch (error) {
      throw new HttpException(
        StatusCodes.INTERNAL_SERVER_ERROR,
        "Error retrieving tour packages"
      );
    }
  }

  async createTourPackage(dto: TourPackageDto): Promise<TourPackageVo> {
    try {
      // Create date ranges using the service
      const dateRangeIds = await Promise.all(
        dto.dateRanges.map(async (range) => {
          const dateRangeDto: DateRangeDto = {
            dates: range.dates,
            state: "activo"
          };
          
          const dateRangeVo = await this.dateRangeService.create(dateRangeDto);
          return new mongoose.Types.ObjectId(dateRangeVo.id);
        })
      );
      
      // Create tour package with dateRange references
      const tourPackageData = {
        ...dto,
        dateRanges: dateRangeIds
      };
      
      const response = await this.tourPackageRepository.createDB(tourPackageData);
      if (!response) {
        throw new HttpException(
          StatusCodes.INTERNAL_SERVER_ERROR,
          "Error al crear paquete turistico"
        );
      }
      
      const vo = new TourPackageVo(
        response._id.toString(),
        response.name,
        response.tourType.toString(),
        response.cancellationPolicy.toString(),
        response.touristDestination.toString(),
        response.duration,
        response.dateRanges,
        response.price,
        {
          days: response.itinerary.days.map((day) => ({
            dayNumber: day.dayNumber,
            activities: day.activities.map((activity) => ({
              description: activity.description,
              time: activity.time,
            })),
          })),
        },
        response.status
      );
      return vo;
    } catch (error) {
      console.error('Error creating tour package:', error);
      throw new HttpException(
        StatusCodes.INTERNAL_SERVER_ERROR,
        "Error creating tour package"
      );
    }
  }
}

import { ITourTypeRepository } from "src/modules/tourType/repository/ITourTypeRepository";
import { TourPackageDto } from "../dto/TourPackageDto";
import { ITourPackageRepository } from "../repository/ITourPackageRepository";
import { TourPackageVo } from "../vo/TourPackageVo";
import { ITourPackageService } from "./ITourPackageService";
import { HttpException } from "../../../middleware/httpException";
import { StatusCodes } from "http-status-codes";
import { ITourPackage } from "../model/ITourPackage";

export class TourPackgeService implements ITourPackageService {
  private readonly tourPackageRepository: ITourPackageRepository;

  constructor(tourPackageRepository: ITourPackageRepository) {
    this.tourPackageRepository = tourPackageRepository;
  }
  async update(id: string, dto: TourPackageDto): Promise<TourPackageVo> {
    try {
      const tpFound = await this.tourPackageRepository.findByIdDB(id);
      if (!tpFound) {
        throw new HttpException(StatusCodes.NOT_FOUND, "Not found");
      }
      const tpUpdated = await this.tourPackageRepository.updateDB(id, dto);
      console.log('tpUpdated::: ', tpUpdated);
      if (!tpUpdated) {
        throw new HttpException(
          StatusCodes.INTERNAL_SERVER_ERROR,
          "Error updating"
        );
      }
      const response = new TourPackageVo(
        tpUpdated._id.toString(),
        tpUpdated.name,
        tpUpdated.tourType.toString(),
        tpUpdated.cancellationPolicy.toString(),
        tpUpdated.touristDestination.toString(),
        tpUpdated.duration,
        tpUpdated.selectedDates,
        tpUpdated.price,
        {
          days: tpUpdated.itinerary.days.map((day) => ({
            dayNumber: day.dayNumber,
            activities: day.activities.map((activity) => ({
              description: activity.description,
              time: activity.time,
            })),
          })),
        },
        tpUpdated.status
      );
      console.log('response::: ', response);
      return response;
    } catch (error) {
      throw new HttpException(
        StatusCodes.INTERNAL_SERVER_ERROR,
        "Internal server error"
      );
    }
  }
  async getAllTourPackages(): Promise<TourPackageVo[]> {
    const tourPackages = await this.tourPackageRepository.geatAllDB();
    // console.log('tourPackages::: ', tourPackages);
    if (!tourPackages) {
      throw new HttpException(StatusCodes.NOT_FOUND, "Tour packages not found");
    }
    const vos = tourPackages.map(
      (tourPackage) =>
        new TourPackageVo(
          tourPackage._id.toString(),
          tourPackage.name,
          tourPackage.tourType.toString(),
          tourPackage.cancellationPolicy.toString(),
          tourPackage.touristDestination.toString(),
          tourPackage.duration,
          tourPackage.selectedDates,
          tourPackage.price,
          {
            days: tourPackage.itinerary.days.map((day) => ({
              dayNumber: day.dayNumber,
              activities: day.activities.map((activity) => ({
                description: activity.description,
                time: activity.time,
              })),
            })),
          },
          tourPackage.status
        )
    );
    // console.log('vos::: ', vos);
    return vos;
  }

  async createTourPackage(dto: TourPackageDto): Promise<TourPackageVo> {
    // console.log('dto::: ', dto);
    const response = await this.tourPackageRepository.createDB(dto);
    // console.log('response::: ', response);
    if (!response) {
      throw new HttpException(
        StatusCodes.INTERNAL_SERVER_ERROR,
        "Error al crear paquete turistico"
      );
    }
    const vo = new TourPackageVo(
      response._id.toString(),
      response.name,
      response.tourType.toString(),
      response.cancellationPolicy.toString(),
      response.touristDestination.toString(),
      response.duration,
      response.selectedDates,
      response.price,
      {
        days: response.itinerary.days.map((day) => ({
          dayNumber: day.dayNumber,
          activities: day.activities.map((activity) => ({
            description: activity.description,
            time: activity.time,
          })),
        })),
      },
      response.status
    );
    return vo;
  }
}
